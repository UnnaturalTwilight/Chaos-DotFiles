(include "activate.yuck")

(include "bar.yuck")

(include "start.yuck")

(include "dunstparse.yuck") ; notifications take a lot of code

;;; Common Varables

;; hyprland
(deflisten workspaces :initial "[]" "scripts/get-workspaces")
(deflisten current_workspace :initial "1" "scripts/get-active-workspace")
; Jank cause I don't want to remove the title length liming feature. 0 = window class always displayed
(deflisten window :initial "..." "scripts/get-window-title 900")
(deflisten special_workspace :initial 1 "scripts/get-special-workspace")
(deflisten special_active :initial false "scripts/get-special-active")

;; music
(deflisten music :initial ""
"playerctl -p mpd --follow metadata --format '{{ artist }} - {{ title }}' || true")

(deflisten playing :initial ""
"playerctl -p mpd --follow status")

;; dunst
(defpoll dnd :interval "30s"
"dunstctl is-paused")

(defpoll dunsthist :interval "30s" 
:initial "{\"data\":[[]]}" ; mini vertion of the data structure
"dunstctl history")

;; system
(defpoll bright :interval "120s" :initial 0
"brightnessctl -m g")

(defpoll volume :interval "1s" :initial "[0, false]"
"scripts/getvol")

(defpoll speaker_raw :interval "1s" :initial ""
"pactl get-default-sink")

(defpoll bat_time :interval "1s"
"acpi -b | awk 'END {print $5 \" \" $6 \" \" $7}'")

(defpoll wifi :interval "2s"
"nmcli -get-values NAME connection show --active | awk 'BEGIN {ORS=\"\"}; !/lo/ {print \"   \" $0}' | sed s/\"tun.\"/\"ó°’ƒ\"/g | sed s/\"tailscale0\"/\"ðŸ–§\"/")
; should do the substitutions in eww so I can use the unsubstituted name in the tooltip

(defpoll mntpoints :interval "30s" :initial "[]"
"scripts/get-mounts")

;; Testing only vars
; (deflisten cavabars
;   :initial "startup"
; "scripts/cavaiguess")

(defvar debug false)

;; Common Widgets

(defwidget padding [space ?expand]
  (box :class "gap" :orientation "h" :halign "fill" :width space :hexpand {expand ?: false}
    :css {debug ? ".gap {background-color: transparentize(#b0b4bc, 0.5); margin: 8px 0px 8px 0px; border-radius: 5px;}" : ""}))

(defwidget bg-clock []
    (box
      :orientation "v"
      :halign "end"
      :valign "start"
      (label :xalign 0 :text {formattime(EWW_TIME, "%H:%M" )})))

(defwindow bg-clock
  :monitor 1
  :stacking "bg"
  :geometry (geometry :x "40px" :y "20px" :width "25px" :anchor "top right")
  (bg-clock))